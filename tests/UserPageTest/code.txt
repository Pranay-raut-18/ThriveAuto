await page.getByPlaceholder('Select Status').click();
await page.getByRole('option', { name: 'Active' }).click();
await page.getByRole('button', { name: 'Apply' }).click();
await page.getByLabel('Clear').click();  to clear the status option
await page.getByRole('option', { name: 'Invited' }).click();


calendar:
 this.calendar=await page.locator('.css-1xhj18k');
 this.fromDateField= await page.locator('div').filter({ hasText: /^Last LoginFromFrom – ToTo$/ }).getByLabel('From').click();
 this.navButton= await page.getByRole('button', { name: 'Previous month' }).click();
  await page.getByText('August').click();
  await page.getByLabel('August').getByRole('gridcell', { name: '1', exact: true }).click();
  await page.locator('div').filter({ hasText: /^Last LoginFromFrom – ToTo$/ }).getByLabel('To').click();
  await page.getByLabel('September').getByRole('gridcell', { name: '1', exact: true }).click();
  await page.locator('div').filter({ hasText: /^CreatedFromFrom – ToTo$/ }).getByLabel('From').click();
  await page.getByLabel('September').getByRole('gridcell', { name: '1', exact: true }).click();
  await page.locator('div').filter({ hasText: /^CreatedFromFrom – ToTo$/ }).getByLabel('To').click();
  await page.getByLabel('September').getByRole('gridcell', { name: '19' }).click();
  await page.getByPlaceholder('Select Status').click();
  await page.getByRole('option', { name: 'Invited' }).click();
  await page.getByRole('button', { name: 'Apply' }).click();


  class for calendar:(.css-ml5lne)

  function for calculating the month difference

  async getMonthDifference(targetMonth,actualMonth){
    const months:{[key:string]:numbers}={
          January: 1,
          February: 2,
          March: 3,
          April: 4,
          May: 5,
          June: 6,
          July: 7,
          August: 8,
          September: 9,
          October: 10,
          November: 11,
          December: 12
        }
    return months[actualMonth]-moths[targetMonth]
 }

async SelectDate(fromMonth:string,date:number,FromOrTo:string,isTo:boolean=false){
    //await this.fromDateField.click();

    await page.locator('div').filter({ hasText: /^Last LoginFromFrom – ToTo$/ }).getByLabel(FromOrTo).click();
    await this.calendar.waitfor();
    const actualMonth=this.page.locator(".css-ml5lne").getinnerText();
    let monthDiffNumber=await this.getMonthDifference(fromMonth,actualMonth);
    const navbutton= monthDiffNumber > 0? 'Previous month':'Next Month';
    const clicks=Math.abs(monthDiffNumber);
    for(let i=0;i<clicks;i++){
        await page.getByRole('button', { name: navButton }).click(clicks);
    }
    await page.getByText(fromMonth).waitfor();
    await page.getByLabel(fromMonth).getByRole('gridcell', { name: date , exact: true }).click();
    if(isTo){
        return;
    }
    await page.SelectDate(fromMonth,date,FromOrTo,true)
    
}





    /**
     * Applies filter in all the fields 
     * @param value The desired status to be selected feild
     */  
    async applyAllFiltera(role:string,createdby:string,status:string): Promise<void> {
      await this.clickFilterRole(role);
      await this.enterCreateFeildValue(createdby);
      await this.clickFilterStatusField(status)

    }

    await page.locator (.css-pvo59i)
    [placeholder="MM/DD/YYYY"]